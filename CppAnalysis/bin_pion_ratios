#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import sys, os, linecache
import argparse
from subprocess import Popen, PIPE

parser = argparse.ArgumentParser(description='SIDIS skimming of multiple runs')
parser.add_argument("--Nruns",        type=int, default=-1,
                    required=False, help="number of runs to process ('-1' for all runs)")
parser.add_argument("--FirstRun",     type=int, default=0,
                    required=False, help="first run to start from")
parser.add_argument("--NeventsMax",   type=int, default=-1,
                    required=False, help="maximal number of events to process")
parser.add_argument("--fdebug",       type=int, default=0,
                    required=False, help="verbosity")
parser.add_argument("--PrintProgress",type=int, default=500000,
                    required=False, help="print progress (every N events)")
args = parser.parse_args()

Nruns         = args.Nruns
NeventsMax    = args.NeventsMax
fdebug        = args.fdebug
PrintProgress = args.PrintProgress
FirstRun      = args.FirstRun
runs_filename = "/work/clas12/users/akiral/SIDIS_at_BAND/macros/runlists/good_runs_10-2.txt"
txt_dir       = "/volatile/clas12/users/akiral/BAND/txt_files"
skimmer       = "/work/clas12/users/akiral/SIDIS_at_BAND/CppAnalysis/PionRatios.C"
pion_codes    = [211, -211]


# Using readlines()
runs_file = open(runs_filename, 'r')
run_fileLines = runs_file.readlines()
if Nruns<0: Nruns = len(run_fileLines)
if fdebug>1:#{
    print('good runs to process:')
    for line in run_fileLines[FirstRun:]:#{
        print(int(line.strip()), end =" ")
    #}
    print('')
    print('processing %d runs, starting from run %d'%(Nruns-FirstRun,FirstRun))
#}


runIdx = 0
for line in run_fileLines[FirstRun:]:#{
    runIdx += 1
    run = int(line.strip())
#    commandline = ("clas12root -q 'SIDISc12rSkimmer.C+(%d,%d,%d,%d)'"%
#                    (run,NeventsMax,fdebug,PrintProgress))
    for pion_code in pion_codes:
        commandline = """#!/bin/sh
    #SBATCH --job-name=h{0}
    #SBATCH -p production
    #SBATCH --account=clas12
    #SBATCH --time=60
    #SBATCH --constraint=centos77
    #SBATCH --mem-per-cpu=1000
    #SBATCH --output={3}/hist_{0}.txt
    clas12root -q '{4}+({0},{1},{2})'
    """.format(run, NeventsMax, pion_code, txt_dir, skimmer)
        print('')
        print("processing run %d/%d/%d"%(runIdx,Nruns,pion_code))
        print('')
        print(commandline)
        print('')
        
        p=Popen(args=["sbatch"],stdin=PIPE)
        p.communicate(commandline.encode())
    
#    os.system( commandline )
    if (runIdx >= Nruns): break;
#}

print('')
print('done.')
print('')

