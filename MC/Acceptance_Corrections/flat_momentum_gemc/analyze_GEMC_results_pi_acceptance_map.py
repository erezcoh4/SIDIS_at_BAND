# -*- coding: utf-8 -*-"""Analyze the results of a simulation of (e,e'\pi) events with GEMC.                        We are interested in pion accetpance,                        so we simulate the same electron multiple times                           last update Jan-26, 2022                        """#%% Imports and definitions# =============================================================================# Imports and definitions# =============================================================================import numpy as np, matplotlib.pyplot as plt, pandas as pdimport sys; sys.path.insert(0, '/Users/erezcohen/Desktop/Software/mySoftware/Python/');from my_tools               import *;from plot_tools             import *;from my_data_analysis_tools import *;#%config InlineBackend.figure_format = 'retina'#%% Auxiliaryp_min     = 1.25 # GeV/cp_max     = 5.00 # GeV/ctheta_min = 0    # deg.theta_max = 180  # deg.phi_min   = -180 # deg.phi_max   = 180  # deg.vz_min    = -10; # cmvz_max    = 10;  # cmr2d       = 180./np.pi;d2r       = np.pi/180.;#%% load datamain_data_path = '~/Desktop/data/BAND/AcceptanceCorrection/GEMCimulationOuputFiles/'eepi_GEMC = pd.read_csv( main_data_path + 'eepips_p_uniform_distribution.csv')#%% how many events include a pi+?Nevents      = len(eepi_GEMC)Nevents_pips = len(eepi_GEMC[eepi_GEMC.Npips>0])print('%.1f'%(100.*Nevents_pips /Nevents),'% events include pi+')#%% plotsfig = plt.figure(figsize=(16,6))for (var_gen,     label,units,bins,     scale_factor,subplot_idx) in zip(['pi_P_g','pi_Theta_g','pi_Phi_g'],                                    ['$p$','$\\theta$', '$\phi$'],                                     ['[GeV/c]','[deg.]', '[deg.]'],                                     [np.linspace(p_min, p_max,30),                                     np.linspace(theta_min, theta_max,30),                                     np.linspace(phi_min, phi_max,30)],                                    [1,r2d,r2d],                                    range(3)):    df_gen = eepi_GEMC;    df_acc = eepi_GEMC[eepi_GEMC.Npips>0];                                          ax = fig.add_subplot(1,3,subplot_idx+1)    x_gen = df_gen[var_gen]    x_acc = df_acc[var_gen]        plot_step_histogram( x_gen*scale_factor, bins, color=color, label='generated')    plot_step_histogram( x_acc*scale_factor, bins, color=color, label='accepted')        # ax.hist( x*scale_factor, bins , edgecolor='k')    set_axes(ax,label + ' ' + units,'counts' if subplot_idx==0 else '',title=label, fontsize=18)plt.tight_layout();# fig = plt.figure(figsize=(16,6))# for x,label,units,bins,scale_factor,subplot_idx in zip([px_arr,py_arr,pz_arr],#                                     ['$p_x$','$p_y$', '$p_z$'], #                                     ['[GeV/c]','[GeV/c]', '[GeV/c]'], #                                     [np.linspace(-p_max, p_max,30),np.linspace(-p_max, p_max,30),np.linspace(-p_max, p_max,30)],#                                     [1,1,1],#                                     range(3)):#     ax = fig.add_subplot(1,3,subplot_idx+1)#     ax.hist( x*scale_factor, bins , edgecolor='k')#     set_axes(ax,label + ' ' + units,'counts' if subplot_idx==0 else '',title=label, fontsize=18)# plt.tight_layout();