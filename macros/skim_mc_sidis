#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# continously take data and print the rate every few seconds
# last edit Sep-12, 2021 (EOC)
#
import sys, os, linecache, re
import argparse
from subprocess import Popen, PIPE

parser = argparse.ArgumentParser(description='SIDIS skimming of multiple runs')
parser.add_argument("--Nruns",        type=int, default=-1,
                    required=False, help="number of runs to process ('-1' for all runs)")
parser.add_argument("--FirstRun",     type=int, default=0,
                    required=False, help="first run to start from")
parser.add_argument("--NeventsMax",   type=int, default=-1,
                    required=False, help="maximal number of events to process")
parser.add_argument("--fdebug",       type=int, default=0,
                    required=False, help="verbosity")
parser.add_argument("--PrintProgress",type=int, default=500000,
                    required=False, help="print progress (every N events)")
args = parser.parse_args()

Nruns         = args.Nruns
NeventsMax    = args.NeventsMax
fdebug        = args.fdebug
PrintProgress = args.PrintProgress
FirstRun      = args.FirstRun
txt_dir       = "/volatile/clas12/users/akiral/BAND/txt_files/mc"
skimmer       = "/work/clas12/users/akiral/SIDIS_at_BAND/MCSIDISc12rSkimmer.C"
data_path     = "/work/clas12/avakian/mc/mcfeb2021/T-1.00_S-1.0/clasdisprot-parj2.0.3parj30.4parj120.75/cooked/"
outfilepath   = "/volatile/clas12/users/akiral/BAND/MC/"
#data_path     = "/work/clas12/avakian/mc/mcfeb2021/T-1.00_S-1.0/clasdisprot-parj2.0.3parj30.4parj120.75/cooked/out_clasdispr.00.e10.600.emn0.75tmn.09.xs80.53nb.dis.0226.dat.evio.hipo"
#data_path     = "/volatile/clas12/rg-b/production/recon/spring2019/torus-1/pass1/v0/dst/train_20200610/inc/inc_006421.hipo"

runIdx = 0
for fname in os.listdir(data_path):
    mc_fname = os.path.join(data_path, fname)
    mc_match = re.match("(out_clasdispr\.00\.e10\.600\.emn0\.75tmn\.09\.xs80\.53nb\.dis\.)(\d{4})(\.dat\.evio\.hipo)", fname)
    if not mc_match:
        continue
    runn_str = mc_match.group(2)
    outfilename = "mc_" + runn_str

    commandline = """#!/bin/sh
#SBATCH --job-name=smc_{8}
#SBATCH -p production
#SBATCH --account=clas12
#SBATCH --time=60
#SBATCH --mem-per-cpu=1000
#SBATCH --output={6}/sidis_mc_{8}.txt
clas12root -q '{7}+({0},{1},{2},1,"{3}","{4}","{5}")'
""".format(NeventsMax,fdebug,PrintProgress, mc_fname, outfilepath, outfilename, txt_dir, skimmer, runn_str)
    print('')
    print("processing run")
    print('')
    print(commandline)
    print('')
    
    p=Popen(args=["sbatch"],stdin=PIPE)
    p.communicate(commandline.encode())

    runIdx += 1
    if Nruns > 0 and runIdx >= Nruns:
        break
    
print('')
print('done.')
print('')

