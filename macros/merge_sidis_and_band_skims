#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# continously take data and print the rate every few seconds
# last edit Sep-30, 2021 (EOC)
#
# example execute:
# ./macros/merge_sidis_and_band_skims --Nruns=1 --worker=ErezMBP --NeventsMax=10 --fdebug=5 --only-pi+
#
import sys, os, linecache, pandas as pd
import glob
import argparse
from termcolor import colored

parser = argparse.ArgumentParser(description='merge SIDIS skimming of multiple runs')
parser.add_argument("--Nruns",        type=int, default=1,
                    required=False, help="number of runs to combine ('-1' for all runs)")
parser.add_argument("--FirstRun",     type=int, default=0,
                    required=False, help="first run to start from")
parser.add_argument("--NeventsMax",   type=int, default=-1,
                    required=False, help="maximal number of events to process")
parser.add_argument("--fdebug",       type=int, default=1,
                    required=False, help="verbosity")
parser.add_argument("--worker",       type=str, default="Alex-ifarm",
                    required=False, help="verbosity")
parser.add_argument("--PrintProgress",type=int, default=50000,
                    required=False, help="print progress (every N events)")
parser.add_argument('--only-pi+',   dest='only_pips', action='store_true', help="do only pi+ (and not pi-)")

args = parser.parse_args()

Nruns         = args.Nruns
NeventsMax    = args.NeventsMax
fdebug        = args.fdebug
FirstRun      = args.FirstRun
PrintProgress = args.PrintProgress
runs_filename = "macros/runlists/good_runs_10-2.txt"

pi_charges = ['pi+','pi-']
if args.only_pips: #{
    pi_charges    = ['pi+']
#}

path          = "";
if args.worker == "Alex-ifarm": #{
        data_path = r'/volatile/clas12/users/akiral/BAND'
#}



# Using readlines()
runs_file = open(runs_filename, 'r')
run_fileLines = runs_file.readlines()
if Nruns<0: Nruns = len(run_fileLines)
if fdebug>3:#{
    print('good runs to process:')
    for line in run_fileLines[FirstRun:]:#{
        print(int(line.strip()), end =" ")
    #}
    print('')
    print(colored('processing %d runs, starting from run %d'%(Nruns-FirstRun,FirstRun),'red'))
#}

runIdx = 0
for line in run_fileLines[FirstRun:]:#{
    runIdx += 1
    run = int(line.strip())
    
    for pi_charge in pi_charges:#{
        commandline = ("root -l -q 'MergeSIDISandBANDSkimmers.C(%d,\"%s\",%d,%d,%d,\"%s\")'"%
                        (run,pi_charge,NeventsMax,fdebug,PrintProgress,data_path))
        print(colored("merge neutron and sidis %s skimming for run %d (%d/%d):"%(pi_charge,run,runIdx,Nruns),'red'))
        print(commandline)
        os.system( commandline )
    #}
    if (runIdx >= Nruns): break;
#}

print('')
print('Done processing merge_sidis_and_band_skims.')

